=======================================================================
>>> Below are the notes I prepared before arriving at Ada.  As I
>>> was writing them, I was also working through the FizzBuzz problem with a
>>> TDD approach, so these may serve as an additional explanation of the
>>> thought process behind the commits in: https://github.com/geeksam/tdd-fizzbuzz
>>> 
>>> I've annotated this file with links to the corresponding changes in
>>> the tdd-fizzbuzz repo.  These will have the form:
>>> 
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/aed37713ebba94e9587507495d1e9d7a2a77cfa8
>>> 
>>> The in-class conversation started to diverge from my prepared notes
>>> fairly early on, and by about halfway through here we were well off into
>>> different territory.  (Which means I actually got to cover more than I
>>> expected to!)
>>> 
>>> Anyway, I'm sharing these now because... um... well, why not?  :)
>>>
>>> Enjoy!
>>> -Sam
=======================================================================


INTRO!

- Please interrupt me at any time!  If you need me to slow down, repeat
  something, explain it a different way... please speak up!
- I've been coding full-time in Ruby for almost eight years.  I am
  *very* good at Ruby, which means I don't have the best grasp on what's
  "simple".  If I type something you don't understand, please ask!
  I'll try to explain it, or do something a simpler way.

CALIBRATION!
- I understand you did a project last week that came with a set of
  tests?
- Has anybody ever written an automated test of their code?
- Are there any questions or topics I should make sure to cover?

FIZZBUZZ!

- Introduce the problem
  http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html
- ASK: would anyone like to take a stab at telling me what to type?  :)
- Live-code fizzbuzz.rb using very basic Ruby (keep it WET and
  readable!), but DO NOT EXECUTE IT!  Before running it, ask:
  - Can we reason about this code?  Do we think it'll work?
  - How will we know if we got it right?
	- start with ~MANUAL INSPECTION~: run the code, look at its output.
    - Pros: no additional code required; humans are good at spotting patterns.
    - Cons: humans are terrible at doing repetitive work quickly and accurately.
	- next, write a ~LOCKDOWN TEST~: in the file test_fizzbuzz.rb, run fizzbuzz.rb
    in backticks, capture output, compare with a reference version of the output.
    Add a line that outputs "Bug" if { Kernel.rand(100) < 5 }, use it to check the
    test.
    - Pros: automation FTW!
    - Cons: still testing the entire program in one shot; error message
      possibly not all that helpful; if running the program has other
      side effects, we'll get them every time.

REVIEW!

So, testing is a way to have some level of confidence that your code
does what you want it to do.  We've just seen a very small example of
what it looks like to write some code, THEN verify that it does what you
think it should do.  I want to emphasize that this approach is TOTALLY
LEGIT.

I sometimes still write code this way, even for my day job.  It works
particularly well for very small programs, especially the sort of
program that I'm going to throw away after an hour or two.

We've already seen two perfectly valid testing techniques:  manual
inspection and automated lockdown tests.  (I got the name "lockdown
test" from Katrina Owen, btw; it may not be a commonly used term.)

Does anybody else have ideas for other ways we might be able to write
automated tests for this code?  [...]  I honestly can't think of much
either; I think we've exhausted our options for testing this code as is.

I said a few moments ago that this works well for small programs that
I'm going to throw away after an hour or so.  For bigger, more
complicated projects, I use a different approach:  I actually write the
tests first.

This approach has several different names:
- Test First Development
- Test Driven Development
- Behavior Driven Development
- Growing Object Oriented Software, Guided by Tests (which is actually a
  book title)

Each of these names has a slightly different emphasis and may indicate
that someone is of a particular school of thought, but fundamentally,
all of these mean the same thing:  figure out how to make the computer
tell you when your code is working, then use that to check your work
as you go.

I first learned this from the book "Test-Driven Development By Example",
so you'll mostly hear me say "TDD".

It's not an exaggeration to say that this book changed my programming
career forever.  This technique was huge, and I've using its techniques
every working day for eight or nine years.

Here's the TDD workflow:

(1) Write a test that describes some new feature of the software.
    Run the test, and watch it fail.  (Watching it fail is crucial!)
(2) Write code that makes all the tests pass.
(3) Look for opportunities to simplify your code.

Repeat until finished.

WRITE THIS ON A FLIP CHART OR THE WHITEBOARD:
1. RED: Write a test, watch it fail
2. GREEN: Make the test pass
3. REFACTOR: remove duplication

-----

FizzBuzz, take two

We'll go back to FizzBuzz, but this time we'll build it up piece by
piece.  Let's start at the beginning:  we want a series of numbers from
1 to 100, but those numbers may be transformed into some other set of
values according to a set of rules.  Not to lay too much math on you,
but this sounds a lot like the definition of a function.

So, let's figure out the rules for the #fizzbuzz_of function.

What's step 1?  (Wait for:  "write a test, watch it fail")

- NEW FILE:  test_fizzbuzz_of_function.rb
<<-RUBY
    require 'fizzbuzz_of_function'

    actual = fizzbuzz_of(1)
    raise "FAILURE:  expected 1, but got #{actual}" unless actual == 1

    puts "SUCCESS!"
RUBY

[run it]

Okay.  What happened here?  [let someone figure out that we're requiring a
nonexistent file.  "Technically, this is an error and not a test failure,
which is also a common thing to have happen at this stage."  [amend step
1:  write a test, maybe fix errors, watch it fail]  Create file, run test
again]

Okay.  What happened now?  [let someone figure out that we haven't
defined #fizzbuzz_of.  still an error.  define it with no args.  still
an error.  then define it with one arg.]

Okay.  What happened now?  [let them figure out that we expected 1,
but got nil.  YAY AN ACTUAL FAILURE!]

Okay.  Now that we've got an actual failure, as opposed to another
error, what's the next step?  [wait for "make the tests pass"]

[PAUSE FOR DRAMATIC EFFECT, THEN:  HARDCODE 1 AS THE RETURN VALUE]

And voila!  The tests pass!

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/aed37713ebba94e9587507495d1e9d7a2a77cfa8

At this point, I have a choice.  Technically, I have duplication
here:  the number '1' appears both in my test and in my code.  So I
could simplify the code by just returning the input parameter.
Sometimes, that's really obvious and I'll just skip this part... but
sometimes I'm working so hard that it's all I can do just to get to this
point.  At times like that, it's good to know how to take really tiny
steps, so I'm going to show you what that process looks like.

I'll defer step 3 for now, and go back to step 1:  add a test for
the next number in the sequence.  [Do so, making sure to watch it fail.]

Step 2:  make it pass.
Step 3:  refactor.  Not much to do here.

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/44970ab328ee36e406b69206aacec9b9f77c9d57

Okay.  I'm feeling good.  I've got some momentum going.  Let's add a
test for fizzbuzz_of(3).

[HARDCODE "if n == 3"!  Then do the same thing with "if n == 5"!]

[FINISH the #fizzbuzz_of(n) method.  This can go as fast or as slow
as it needs to.  Consider deliberately introducing regressions.  Retype
tests instead of copy/pasting them, so you get some irregularities in
message formatting and style that you can refactor out later.]

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/20b26b51696325298f1c0c02e99257d5252a6cd2
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/769f099287b9bdbe464cbfc2bd257cdd0d61c925
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/b1cdbb440157283066d17d06132b04852bec5936
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/ba37df0cbe1b70d7ca1a5c0a662e505a846d417d
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/b8b08596b608b0d7fd06298166c91ff24c98dbc4
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/52e053bc091ce89882b0e9028c7144c4924dd518

Okay.  We've got this fizzbuzz_of function, and we're satisfied that it
works as we intend.  Now let's go back and use it in our original code.
[EDIT test_fizzbuzz.rb, replace the guts of the loop with a call
to #fizzbuzz_of.]

[...]

Let's review, because we just introduced a lot of new ideas.

I just wrote code to do the same thing twice, but the second time, I
started by writing a test.  What effect did that have on my code?

[...]

So, I just wrote a bunch of tests to help me make sure my code was
working.  The code looks pretty good, but the tests are... kinda messy.
Now that we have code that works, we can use the *code* to help us 
clean up the *tests*.

-----

What do we notice about these tests?
- if we break several things, only the first one will fail
- individual tests aren't well defined:  whitespace and a pattern is our
  only key
- visual noise makes it hard to tell what each test is actually testing
- We might be inconsistent about failure messages
- Lots of copy/paste coding.  As a rule, when I find myself selecting a
  block of code and copying it, alarm bells start going off in my head.
  (Sometimes I like to imagine that I'm writing code on a keyboard where
  the Apple key and the C key are each hooked up to a car battery, and
  if I touch them both at the same time, I'll get a nasty electric
  shock.)
- might be order-dependent:  we can set up state in one test, modify
  it in a second test, and depend on that new state in a third test
- can't be run in parallel (partly because they *might* be
  order-dependent, and mostly because they're written as a Ruby script)
- don't have any progress indicators

Let's address some of these issues.

I'm going to start with the test failures.  Instead of saying "raise
message unless some condition", I'm going to say "assert some condition,
and raise this message if it ain't so."

[ extract #assert(condition, msg) ]

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/bb245eb020d11a406b9dedd09f999f6a8392f1e6
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/0ac451a588731fd10624277710a779defbf95644
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/d908ee6e982116e17bca58207e0c7b557a78aef1
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/c018081645d5d187d052c374a4bd682382a27f8d

Right now, we have a big Ruby script that runs from top to bottom.
This makes it really easy to introduce bugs by sharing state between
tests.  (Comment out one of the "actual = fizzbuzz_of(3)" lines.)
What if we built up a list of tests, and ran each of them separately?

[ extract #test(description, &block). comment out "actual = " again. ]

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/17e844c456c19a713af9b0fd3bb6c19501a22553
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/383b957bab8ef7806aed35337e19c6c89bd54b31

Now that we've done that, we can print some progress indicators...

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/740de07fdf9f494c27d4106ba508803a7787410d
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/e8dd013e8f85e43e7a9e895f125d58f61e156a08

...and remember how I said those tests were order dependent?  What if we
ran them in randomized order every time?

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/8e4f0a515b78f071ecdde5935a3301deb7b4c55b
>>> (note that these aren't randomized, but that could easily be done by
>>> inserting ".shuffle" at the right point...)

...by the way, what if these are slow?  (Insert "sleep 0.5")

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/0466e3fdff4db6500392669cb785611db6154980

We could run them in parallel by putting each one inside a thread...

>>> https://github.com/geeksam/tdd-fizzbuzz/commit/7aeb4fcaa898db5a94a7956a3f3833f4fb12569c
>>> (and then I started really having fun...)
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/266114826215fa461aad644db9af5d2f07e026cc
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/d77b696298969d30af8309b72ac78dfc0a349691
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/079251c9dad8a2f17706a4386ee6366f46cacc35
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/29058b51b02f953f24b5a05210ee50e472bf504e
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/15595f22c474bd1e4e8124b52add020a572428e1
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/5ee3740ed4a0512e582d3f82d570724e972e0f61
>>> (this last one in particular uses some interesting Ruby tricks)
>>> https://github.com/geeksam/tdd-fizzbuzz/commit/a4047354ada00ca5923fffbe7832ba1c20ad1a3c
